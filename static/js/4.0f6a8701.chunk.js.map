{"version":3,"sources":["components/chartSpace/chartSpace.module.css","components/charts/Chart.js","components/charts/charts.module.css","components/chartSpace/ChartSpace.js","utils/colors.js","components/chartSpace/Overall.js"],"names":["module","exports","MyChart","data","options","type","width","canvasRef","useRef","useEffect","chart","Chart","current","update","destroy","className","styles","container","style","ref","canvas_line_chart","fallback_p","buildOptions","title","scale","bodyCSS","parseFloat","getComputedStyle","document","querySelector","scales","yAxes","ticks","fontSize","xAxes","display","text","legend","labels","responsive","maintainAspectRatio","animation","duration","ChartSpace","ipl_data","useData","useState","seasons","changeSeasons","cities","changeCities","isDataLoaded","newSeasons","Set","map","match","season","sort","a","b","Number","newCities","city","chart_space","datasets","matchCount","forEach","team1","team","team2","label","borderColor","fill","winner","toss_winner","backgroundColor","filter","toss_decision","length","cutoutPercentage","getColorArray","num","result","i","letters","split","color","j","Math","floor","random","push","hexToRgb","hex","exec","parseInt","colors","teams","changeTeams","players","changePlayers","newTeams","finalPlayers","player_of_match","player","name","count","slice","borderWidth"],"mappings":"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","file":"static/js/4.0f6a8701.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart_space\":\"chartSpace_chart_space__3zTQr\"};","import React, { useRef, useEffect } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport styles from \"./charts.module.css\";\r\n\r\nconst MyChart = ({ data, options, type, width }) => {\r\n  const canvasRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const chart = new Chart(canvasRef.current, {\r\n      type,\r\n      data,\r\n      options,\r\n    });\r\n    chart.update();\r\n    return () => {\r\n      chart.destroy();\r\n    };\r\n  }, [data, options, type]);\r\n\r\n  return (\r\n    <div className={styles.container} style={{ width }}>\r\n      <canvas ref={canvasRef} className={styles.canvas_line_chart}>\r\n        <p className={styles.fallback_p}>Hello Fallback World</p>\r\n      </canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyChart;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"charts_container__2oi8D\",\"canvas_line_chart\":\"charts_canvas_line_chart__1fLfM\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./chartSpace.module.css\";\r\n\r\nimport Chart from \"../charts/Chart\";\r\n\r\nimport { useData } from \"../../context/context\";\r\n\r\nexport const buildOptions = (title, scale) => {\r\n  const bodyCSS = parseFloat(\r\n    getComputedStyle(document.querySelector(\"body\"))[\"font-size\"]\r\n  );\r\n  return {\r\n    scales: scale\r\n      ? {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                fontSize: bodyCSS * 0.8,\r\n              },\r\n            },\r\n          ],\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                fontSize: bodyCSS * 0.8,\r\n              },\r\n            },\r\n          ],\r\n        }\r\n      : null,\r\n    title: {\r\n      display: true,\r\n      text: title,\r\n      fontSize: bodyCSS,\r\n    },\r\n    legend: { display: true, labels: { fontSize: bodyCSS * 0.8 } },\r\n    responsive: true,\r\n    maintainAspectRatio: true,\r\n    animation: {\r\n      duration: 600,\r\n    },\r\n  };\r\n};\r\n\r\nconst ChartSpace = () => {\r\n  const ipl_data = useData();\r\n  const [seasons, changeSeasons] = useState([]);\r\n  const [cities, changeCities] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (ipl_data.isDataLoaded) {\r\n      const newSeasons = [\r\n        ...new Set(ipl_data.data.map((match) => match.season)),\r\n      ];\r\n      newSeasons.sort((a, b) => {\r\n        if (Number(a) < Number(b)) return -1;\r\n        return 1;\r\n      });\r\n      changeSeasons(newSeasons);\r\n      const newCities = [...new Set(ipl_data.data.map((match) => match.city))];\r\n      changeCities(newCities);\r\n    }\r\n  }, [ipl_data.data, ipl_data.isDataLoaded]);\r\n  return (\r\n    <div className={styles.chart_space}>\r\n      <Chart\r\n        type=\"line\"\r\n        data={{\r\n          labels: seasons,\r\n          datasets: [\r\n            {\r\n              data: seasons.map((season) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (\r\n                    match.season === season &&\r\n                    (match.team1 === ipl_data.team ||\r\n                      match.team2 === ipl_data.team)\r\n                  )\r\n                    matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              label: \"Matches played\",\r\n              borderColor: \"#2E5BFF\",\r\n              fill: false,\r\n            },\r\n            {\r\n              data: seasons.map((season) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (match.season === season && match.winner === ipl_data.team)\r\n                    matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              label: \"Matches won\",\r\n              borderColor: \"#8C54FF\",\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={buildOptions(\"Matches played v/s won per season\", true)}\r\n      />\r\n      <Chart\r\n        type=\"bar\"\r\n        data={{\r\n          labels: seasons,\r\n          datasets: [\r\n            {\r\n              data: seasons.map((season) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (\r\n                    match.season === season &&\r\n                    (match.team1 === ipl_data.team ||\r\n                      match.team2 === ipl_data.team) &&\r\n                    match.toss_winner !== ipl_data.team\r\n                  )\r\n                    matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              label: \"win\",\r\n              backgroundColor: \"#8C54FF\",\r\n              fill: false,\r\n            },\r\n            {\r\n              data: seasons.map((season) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (\r\n                    match.season === season &&\r\n                    match.toss_winner === ipl_data.team\r\n                  )\r\n                    matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              label: \"loss\",\r\n              backgroundColor: \"#2E5BFF\",\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={buildOptions(\"Toss result per season\", true)}\r\n      />\r\n      <Chart\r\n        type=\"doughnut\"\r\n        data={{\r\n          labels: [\"Fielding\", \"Batting\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                ipl_data.data.filter(\r\n                  (match) =>\r\n                    match.toss_winner === ipl_data.team &&\r\n                    match.toss_decision === \"field\"\r\n                ).length,\r\n                ipl_data.data.filter(\r\n                  (match) =>\r\n                    match.toss_winner === ipl_data.team &&\r\n                    match.toss_decision === \"bat\"\r\n                ).length,\r\n              ],\r\n              label: \"matches\",\r\n              backgroundColor: [\"#8C54FF\", \"#2E5BFF\"],\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={{ ...buildOptions(\"Toss Decision\"), cutoutPercentage: 65 }}\r\n      />\r\n      <Chart\r\n        type=\"doughnut\"\r\n        data={{\r\n          labels: [\"Win\", \"loss\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                ipl_data.data.filter(\r\n                  (match) =>\r\n                    (match.team1 === ipl_data.team ||\r\n                      match.team2 === ipl_data.team) &&\r\n                    match.winner === ipl_data.team\r\n                ).length,\r\n                ipl_data.data.filter(\r\n                  (match) =>\r\n                    (match.team1 === ipl_data.team ||\r\n                      match.team2 === ipl_data.team) &&\r\n                    match.winner !== ipl_data.team\r\n                ).length,\r\n              ],\r\n              label: \"matches\",\r\n              backgroundColor: [\"#8C54FF\", \"#2E5BFF\"],\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={{ ...buildOptions(\"Win percentage\"), cutoutPercentage: 65 }}\r\n      />\r\n      <Chart\r\n        type=\"line\"\r\n        data={{\r\n          labels: cities,\r\n          datasets: [\r\n            {\r\n              data: cities.map((city) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (\r\n                    match.city === city &&\r\n                    (match.team1 === ipl_data.team ||\r\n                      match.team2 === ipl_data.team)\r\n                  )\r\n                    matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              label: \"Matches played\",\r\n              borderColor: \"#2E5BFF\",\r\n              fill: false,\r\n            },\r\n            {\r\n              data: cities.map((city) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (match.city === city && match.winner === ipl_data.team)\r\n                    matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              label: \"Matches won\",\r\n              borderColor: \"#8C54FF\",\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={buildOptions(\"Matches played v/s won at each city\", true)}\r\n        width=\"65rem\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default ChartSpace;\r\n","const getColorArray = (num) => {\r\n  let result = [];\r\n  for (var i = 0; i < num; i += 1) {\r\n    var letters = \"0123456789ABCDEF\".split(\"\");\r\n    var color = \"#\";\r\n    for (var j = 0; j < 6; j += 1) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    result.push(color);\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const hexToRgb = (hex) => {\r\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result\r\n    ? `rgba(${parseInt(result[1], 16)},${parseInt(result[2], 16)},${parseInt(\r\n        result[3],\r\n        16\r\n      )},0.3)`\r\n    : null;\r\n};\r\n\r\nexport const colors = getColorArray(50);\r\n\r\nexport default getColorArray;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./chartSpace.module.css\";\r\n\r\nimport Chart from \"../charts/Chart\";\r\n\r\nimport { useData } from \"../../context/context\";\r\nimport { buildOptions } from \"./ChartSpace\";\r\nimport { colors, hexToRgb } from \"../../utils/colors\";\r\n\r\nconst ChartSpace = () => {\r\n  const ipl_data = useData();\r\n  const [seasons, changeSeasons] = useState([]);\r\n  const [cities, changeCities] = useState([]);\r\n  const [teams, changeTeams] = useState([]);\r\n  const [players, changePlayers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (ipl_data.isDataLoaded) {\r\n      const newSeasons = [\r\n        ...new Set(ipl_data.data.map((match) => match.season)),\r\n      ];\r\n      newSeasons.sort((a, b) => {\r\n        if (Number(a) < Number(b)) return -1;\r\n        return 1;\r\n      });\r\n      changeSeasons(newSeasons);\r\n      const newCities = [...new Set(ipl_data.data.map((match) => match.city))];\r\n      changeCities(newCities);\r\n      const newTeams = [...new Set(ipl_data.data.map((match) => match.team1))];\r\n      changeTeams(newTeams);\r\n      const newPlayers = [\r\n        ...new Set(ipl_data.data.map((match) => match.player_of_match)),\r\n      ];\r\n      let finalPlayers = newPlayers.map((player) => {\r\n        let matchCount = 0;\r\n        ipl_data.data.forEach((match) => {\r\n          if (match.player_of_match === player) matchCount++;\r\n        });\r\n        return { name: player, count: matchCount };\r\n      });\r\n      finalPlayers.sort((a, b) => {\r\n        if (a.count > b.count) return -1;\r\n        return 1;\r\n      });\r\n      finalPlayers = finalPlayers.slice(0, 10);\r\n      changePlayers(finalPlayers);\r\n    }\r\n  }, [ipl_data.data, ipl_data.isDataLoaded]);\r\n  return (\r\n    <div className={styles.chart_space}>\r\n      <Chart\r\n        type=\"bar\"\r\n        data={{\r\n          labels: teams,\r\n          datasets: [\r\n            {\r\n              data: teams.map((team) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (match.team1 === team || match.team2 === team)\r\n                    matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n\r\n              borderColor: colors,\r\n              backgroundColor: colors.map((color) => hexToRgb(color)),\r\n              borderWidth: 2,\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          ...buildOptions(\"Total matches played by each team\", true),\r\n          legend: { display: false },\r\n        }}\r\n        width=\"65rem\"\r\n      />\r\n      <Chart\r\n        type=\"bar\"\r\n        data={{\r\n          labels: players.map((player) => player.name),\r\n          datasets: [\r\n            {\r\n              data: players.map((player) => player.count),\r\n              borderColor: colors,\r\n              backgroundColor: colors.map((color) => hexToRgb(color)),\r\n              borderWidth: 2,\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          ...buildOptions(\"Top player of the match awardees\", true),\r\n          legend: { display: false },\r\n        }}\r\n        width=\"65rem\"\r\n      />\r\n      <Chart\r\n        type=\"line\"\r\n        data={{\r\n          labels: seasons,\r\n          datasets: [\r\n            {\r\n              data: seasons.map((season) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (match.season === season) matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              label: \"Matches played\",\r\n              borderColor: \"#2E5BFF\",\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={buildOptions(\"Matches played per season\", true)}\r\n      />\r\n      <Chart\r\n        type=\"bar\"\r\n        data={{\r\n          labels: seasons,\r\n          datasets: [\r\n            {\r\n              data: seasons.map((season) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (match.season === season && match.toss_decision === \"bat\")\r\n                    matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              label: \"bat\",\r\n              backgroundColor: \"#8C54FF\",\r\n              fill: false,\r\n            },\r\n            {\r\n              data: seasons.map((season) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (\r\n                    match.season === season &&\r\n                    match.toss_decision === \"field\"\r\n                  )\r\n                    matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              label: \"field\",\r\n              backgroundColor: \"#2E5BFF\",\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={buildOptions(\"Toss decision per season\", true)}\r\n      />\r\n      <Chart\r\n        type=\"doughnut\"\r\n        data={{\r\n          labels: [\"Fielding\", \"Batting\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                ipl_data.data.filter((match) => match.toss_decision === \"field\")\r\n                  .length,\r\n                ipl_data.data.filter((match) => match.toss_decision === \"bat\")\r\n                  .length,\r\n              ],\r\n              label: \"matches\",\r\n              backgroundColor: [\"#8C54FF\", \"#2E5BFF\"],\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={{ ...buildOptions(\"Toss Decision\"), cutoutPercentage: 65 }}\r\n      />\r\n      <Chart\r\n        type=\"doughnut\"\r\n        data={{\r\n          labels: [\"Win\", \"loss\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                ipl_data.data.filter((match) => {\r\n                  const winner = match.toss_winner;\r\n                  return match.winner === winner;\r\n                }).length,\r\n                ipl_data.data.filter((match) => {\r\n                  const winner = match.toss_winner;\r\n                  return match.winner !== winner;\r\n                }).length,\r\n              ],\r\n              label: \"matches\",\r\n              backgroundColor: [\"#8C54FF\", \"#2E5BFF\"],\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          ...buildOptions(\"Toss winner is match winner\"),\r\n          cutoutPercentage: 65,\r\n        }}\r\n      />\r\n      <Chart\r\n        type=\"bar\"\r\n        data={{\r\n          labels: teams,\r\n          datasets: [\r\n            {\r\n              data: teams.map((team) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (match.toss_winner === team) matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              borderColor: colors,\r\n              backgroundColor: colors.map((color) => hexToRgb(color)),\r\n              borderWidth: 2,\r\n              label: \"Toss won\",\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          ...buildOptions(\"Maximum toss winner\", true),\r\n          legend: { display: false },\r\n        }}\r\n        width=\"65rem\"\r\n      />\r\n      <Chart\r\n        type=\"line\"\r\n        data={{\r\n          labels: cities,\r\n          datasets: [\r\n            {\r\n              data: cities.map((city) => {\r\n                let matchCount = 0;\r\n                ipl_data.data.forEach((match) => {\r\n                  if (match.city === city) matchCount++;\r\n                });\r\n                return matchCount;\r\n              }),\r\n              label: \"Matches played\",\r\n              borderColor: \"#2E5BFF\",\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={buildOptions(\"Matches played at each city\", true)}\r\n        width=\"65rem\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default ChartSpace;\r\n"],"sourceRoot":""}