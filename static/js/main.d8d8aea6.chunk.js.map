{"version":3,"sources":["context/context.js","components/loader/loader.module.css","utils/fetchCsv.js","components/loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["DataContext","createContext","isDataLoaded","data","team","setIsDataLoaded","setData","setTeam","useData","useContext","module","exports","fetchCsv","location","fetch","then","response","reader","body","getReader","decoder","TextDecoder","read","result","decode","value","getCsvData","cb","a","csvData","Papa","parse","header","complete","Loader","class","styles","loader","Nav","React","lazy","TeamSelector","ChartSpace","OverAll","App","useState","changeIsDataLoaded","changeData","changeTeam","useEffect","fetchCsvData","forEach","match","team1","team2","winner","toss_winner","pop","console","log","fetchData","Provider","bool","t","fallback","style","height","width","display","flexDirection","justifyContent","alignItems","className","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d8d8aea6.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\r\n\r\nconst auth = {\r\n  isDataLoaded: false,\r\n  data: [],\r\n  team: null,\r\n  setIsDataLoaded: () => {},\r\n  setData: () => {},\r\n  setTeam: () => {},\r\n};\r\nexport const DataContext = createContext(auth);\r\nexport const useData = () => {\r\n  return useContext(DataContext);\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"loader_loader__35zv6\",\"spin\":\"loader_spin__2vwQ0\"};","import Papa from \"papaparse\";\r\n\r\nconst fetchCsv = (location) => {\r\n  return fetch(location).then((response) => {\r\n    let reader = response.body.getReader();\r\n    let decoder = new TextDecoder(\"utf-8\");\r\n\r\n    return reader.read().then((result) => decoder.decode(result.value));\r\n  });\r\n};\r\n\r\nconst getCsvData = async (location, cb) => {\r\n  let csvData = await fetchCsv(location);\r\n  Papa.parse(csvData, {\r\n    header: true,\r\n    complete: cb,\r\n  });\r\n};\r\n\r\nexport default getCsvData;\r\n","import React from \"react\";\r\nimport styles from \"./loader.module.css\";\r\n\r\nconst Loader = () => {\r\n  return <div class={styles.loader}></div>;\r\n};\r\nexport default Loader;\r\n","import React, { useState, useEffect, Suspense } from \"react\";\nimport \"./App.css\";\nimport { DataContext } from \"./context/context\";\nimport fetchCsvData from \"./utils/fetchCsv\";\nimport Loader from \"./components/loader/Loader\";\n\nconst Nav = React.lazy(() => import(\"./components/nav/Nav\"));\nconst TeamSelector = React.lazy(() =>\n  import(\"./components/teamSelector/TeamSelector\")\n);\nconst ChartSpace = React.lazy(() =>\n  import(\"./components/chartSpace/ChartSpace\")\n);\nconst OverAll = React.lazy(() => import(\"./components/chartSpace/Overall\"));\n\nfunction App() {\n  const [isDataLoaded, changeIsDataLoaded] = useState(false);\n  const [data, changeData] = useState([]);\n  const [team, changeTeam] = useState(\"Overall\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchCsvData(\"/data/ipl_data.csv\", (data) => {\n        data.data.forEach((match) => {\n          if (match.team1 === \"Rising Pune Supergiant\")\n            match.team1 = \"Rising Pune Supergiants\";\n          if (match.team2 === \"Rising Pune Supergiant\")\n            match.team2 = \"Rising Pune Supergiants\";\n          if (match.winner === \"Rising Pune Supergiant\")\n            match.winner = \"Rising Pune Supergiants\";\n          if (match.toss_winner === \"Rising Pune Supergiant\")\n            match.toss_winner = \"Rising Pune Supergiants\";\n        });\n        data.data.pop();\n        changeData(data.data);\n        console.log(data.data);\n      });\n      changeIsDataLoaded(true);\n    };\n    fetchData();\n  }, []);\n  return (\n    <DataContext.Provider\n      value={{\n        isDataLoaded,\n        data,\n        team,\n        setIsDataLoaded: (bool) => changeIsDataLoaded(bool),\n        setData: (data) => changeData(data),\n        setTeam: (t) => changeTeam(t),\n      }}\n    >\n      <Suspense\n        fallback={\n          <div\n            style={{\n              height: \"100vh\",\n              width: \"100%\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Loader />\n          </div>\n        }\n      >\n        <div className=\"App\">\n          <Nav />\n          <div className=\"app-space\">\n            <TeamSelector />\n            {team === \"Overall\" ? <OverAll /> : <ChartSpace />}\n          </div>\n        </div>\n      </Suspense>\n    </DataContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}